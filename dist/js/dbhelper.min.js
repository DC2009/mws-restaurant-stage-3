
class DBHelper{static get DATABASE_URL(){const port=1337;return`http://localhost:${port}`;}
static openIDB(){return idb.open('restaurantReviewsApp',1,upgradeDb=>{if(!upgradeDb.objectStoreNames.contains('restaurants')){const store=upgradeDb.createObjectStore('restaurants',{keyPath:'id'});}
if(!upgradeDb.objectStoreNames.contains('pending-reviews')){const store=upgradeDb.createObjectStore('pending-reviews',{keyPath:'id',autoIncrement:true});}
for(let i=1;i<10;i++){if(!upgradeDb.objectStoreNames.contains(`reviews-restaurant-${i}`)){const store=upgradeDb.createObjectStore(`reviews-restaurant-${i}`,{keyPath:'id',autoIncrement:true});}}});}
static deleteStore(transactionName,storeName){return DBHelper.openIDB().then(db=>{const tx=db.transaction(transactionName,'readwrite').objectStore(storeName).clear();return tx.complete;});}
static loadStore(transactionName,storeName){return DBHelper.openIDB().then(db=>{const index=db.transaction(transactionName).objectStore(storeName);return index.getAll();});}
static saveStore(data,transactionName,storeName){return DBHelper.openIDB().then(db=>{if(!db)return;const tx=db.transaction(transactionName,'readwrite');const store=tx.objectStore(storeName);Array.from(data).forEach(bit=>store.put(bit));return tx.complete;});}
static saveReview(data,transactionName,storeName){return DBHelper.openIDB().then(db=>{if(!db)return;const tx=db.transaction(transactionName,'readwrite');const store=tx.objectStore(storeName);store.put(data);return tx.complete;});}
static loadFromAPI(slug,transactionName,storeName){return fetch(`${DBHelper.DATABASE_URL}/${slug}`).then(response=>response.json()).then(data=>{DBHelper.saveStore(data,transactionName,storeName);return data;});}
static fetchRestaurants(callback){DBHelper.loadStore('restaurants','restaurants').then(data=>{if(data.length==0){return DBHelper.loadFromAPI('restaurants','restaurants','restaurants');}
return data;}).then(restaurants=>{callback(null,restaurants);}).catch(error=>{console.log(`Error fetching restaurants: ${error}`);callback(error,null);});}
static fetchRestaurantById(id,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null);}else{const restaurant=restaurants.find(r=>r.id==id);if(restaurant){callback(null,restaurant);}else{callback('Restaurant does not exist',null);}}});}
static fetchRestaurantByCuisine(cuisine,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null);}else{const results=restaurants.filter(r=>r.cuisine_type==cuisine);callback(null,results);}});}
static fetchRestaurantByNeighborhood(neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null);}else{const results=restaurants.filter(r=>r.neighborhood==neighborhood);callback(null,results);}});}
static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null);}else{let results=restaurants;if(cuisine!='all'){results=results.filter(r=>r.cuisine_type==cuisine);}
if(neighborhood!='all'){results=results.filter(r=>r.neighborhood==neighborhood);}
callback(null,results);}});}
static fetchNeighborhoods(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null);}else{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood);const uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i);callback(null,uniqueNeighborhoods);}});}
static fetchCuisines(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null);}else{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type);const uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i);callback(null,uniqueCuisines);}});}
static urlForRestaurant(restaurant){return`./restaurant.html?id=${restaurant.id}`;}
static imageUrlForRestaurant(restaurant){let{photograph}=restaurant;if(!photograph){photograph=10;}
return`/img/${photograph}`;}
static mapMarkerForRestaurant(restaurant,map){const marker=new google.maps.Marker({position:restaurant.latlng,title:restaurant.name,url:DBHelper.urlForRestaurant(restaurant),map:map,animation:google.maps.Animation.DROP});return marker;}
static favoriteRestaurant(restaurant){if(!restaurant)return;return fetch(`${DBHelper.DATABASE_URL}/restaurants/${restaurant.id}/?is_favorite=${
        restaurant.is_favorite
      }`,{method:'PUT'}).then(response=>response.json()).then(data=>{DBHelper.saveStore(self.restaurants,'restaurants','restaurants');return data;}).catch(e=>{DBHelper.saveStore(self.restaurants,'restaurants','restaurants');console.error(`Error updating favorite restaurant: ${e}`)});}
static fetchReviewsById(id,callback){DBHelper.loadStore(`reviews-restaurant-${id}`,`reviews-restaurant-${id}`).then(data=>{if(data.length==0){return DBHelper.loadFromAPI(`reviews/?restaurant_id=${id}`,`reviews-restaurant-${self.restaurant.id}`,`reviews-restaurant-${self.restaurant.id}`);}
return Promise.resolve(data);}).then(reviews=>{callback(null,reviews);}).catch(err=>{console.log(`Error fetching reviews by Id: ${err}`);callback(err,null);});}
static postReview(review){if(!review)return;return fetch(`${DBHelper.DATABASE_URL}/reviews`,{method:'POST',body:JSON.stringify(review),headers:{'Content-Type':'application/json'}}).then(resp=>resp.json()).then(data=>{DBHelper.saveReview(data,`reviews-restaurant-${self.restaurant.id}`,`reviews-restaurant-${self.restaurant.id}`);return data;}).catch(err=>{DBHelper.saveReview(review,`pending-reviews`,`pending-reviews`);if(!self.pendingReviews){self.pendingReviews=[];}
self.pendingReviews.push(review);console.log(`Error posting a review: ${err}`);return review;});}}